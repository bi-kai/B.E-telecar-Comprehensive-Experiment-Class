C51 COMPILER V7.00  Ê_¶________Äµ¥_¬»____ò                                                 06/25/2010 16:03:10 PAGE 1   


C51 COMPILER V7.00, COMPILATION OF MODULE Ê_¶________Äµ¥_¬»____ò
OBJECT MODULE PLACED IN ÊÕ¶Ë¡ª¡ªºËÐÄµ¥Æ¬»ú³ÌÐò.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ÊÕ¶Ë¡ª¡ªºËÐÄµ¥Æ¬»ú³ÌÐò.c BROWSE DEBUG OBJECTEXTEND

stmt level    source

   1          /******************************************************************************************\ 
   2          ============================================================================================
   3          * T905.c
   4          *
   5          * This file is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTYT; 
   6          * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
   7          *
   8          *
   9          * NOTES:
  10          * This program is for the nRF905 with 232 interface;
  11          * $write date: 2004.4.7 ;time 11:00$
  12          * $Revision: 1 $
  13          *
  14          /*******************************************************************************************/
  15          #include <reg52.h>
  16          #include <intrins.h>
  17          
  18          #define uchar unsigned char 
  19          #define uint  unsigned int
  20          
  21          #define WC              0x00                    // Write configuration register command
  22          #define RC              0x10                    // Read  configuration register command
  23          #define WTP             0x20                    // Write TX Payload  command
  24          #define RTP             0x21                    // Read  TX Payload  command
  25          #define WTA             0x22                    // Write TX Address  command
  26          #define RTA             0x23                    // Read  TX Address  command
  27          #define RRP             0x24                    // Read  RX Payload  command
  28          /*******************************************************************************************/
  29          typedef struct RFConfig
  30          {
  31                  uchar n;
  32                  uchar buf[10];
  33          }RFConfig;
  34          
  35          code RFConfig RxTxConf={
  36                  10,
  37                  0x01, 0x0c, 0x44, 0x20, 0x20, 0xcc, 0xcc, 0xcc,0xcc, 0x58       
  38          };
  39          // The content of this struct is nRF905's initialize data.³õÊ¼»¯Êý¾Ý
  40          // CH_NO=1;433MHZ;Normal Opration,No Retrans;RX,TX Address is 4 Bytes
  41          // RX TX Payload Width is 32 Bytes;Disable Extern Clock;Fosc=16MHZ
  42          // 8 Bits CRC And enable
  43          /*******************************************************************************************/
  44          uchar data TxBuf[32];
  45          uchar data RxBuf[32];
  46          uchar data Textbuf[2];
  47          uchar key;
  48          uchar rsbrf;
  49          uchar delayf;
  50          
  51          
  52          void refree_allpins();
  53          /*******************************************************************************************/
  54          uchar bdata DATA_BUF;
  55          sbit    flag=DATA_BUF^7;
C51 COMPILER V7.00  Ê_¶________Äµ¥_¬»____ò                                                 06/25/2010 16:03:10 PAGE 2   

  56          sbit    flag1=DATA_BUF^0;
  57          /*******************************************************************************************/
  58          sbit    TX_EN=P1^7;
  59          sbit    TRX_CE=P1^6;
  60          sbit    PWR_UP=P1^5;
  61          sbit    MISO=P1^1;
  62          sbit    MOSI=P1^0;
  63          sbit    SCK=P3^7;
  64          sbit    CSN=P3^3;
  65          
  66          sbit    AM=P1^3;//µØÖ·Æ¥Åä
  67          sbit    DR=P3^2;//½ÓÊÕ»ò·¢ÉäÍê³É
  68          sbit    CD=P1^4;//ÔØ²¨¼ì²â
  69          
  70          sbit duoji_1_up=P2^0;//¿ØÖÆÐÅºÅ
  71          sbit duoji_1_down=P2^1;//¿ØÖÆÐÅºÅ
  72          sbit duoji_2_up=P2^2;//¿ØÖÆÐÅºÅ
  73          sbit duoji_2_down=P2^3;//¿ØÖÆÐÅºÅ
  74          
  75          sbit motor_1_1=P2^4;//¿ØÖÆÐÅºÅ
  76          sbit motor_1_2=P2^5;//¿ØÖÆÐÅºÅ
  77          sbit motor_2_1=P2^6;//¿ØÖÆÐÅºÅ
  78          sbit motor_2_2=P2^7;//¿ØÖÆÐÅºÅ
  79          
  80          sbit allowmotorchack_flag=P1^2;
  81          /*******************************************************************************************/
  82          void InitIO(void);                      // Initialize IO port
  83          void Inituart(void);                    // initialize 232 uart
  84          void Config905(void);                   // Config nRF905 module(×é¼þ¡¢Ä£¿é)ÅäÖÃNRF905Ä£Ê½
  85          void SetTxMode(void);                   // Set nRF905 in Tx mode
  86          void SetRxMode(void);                   // Set nRF905 in Rx mode
  87          void TxPacket(void);                    // Send data by nRF905
  88          void RxPacket(void);                    // Recive data by nRF905
  89          void SpiWrite(uchar);                   // Write data to nRF905
  90          uchar SpiRead(void);                    // Read data to nRF905
  91          void Delay(uchar n);                    // Delay 100us
  92          void Scankey(void);                             // Scan key
  93          void TxData (uchar x);                  // Send key_value to CRT display
  94          void comdebug(void);
  95          void send(unsigned char str[]);
  96          void delayms(unsigned char ms);
  97          
  98          /*******************************************************************************************/
  99          void Delay(uchar n)
 100          {
 101   1              uint i;
 102   1              while(n--)
 103   1              for(i=0;i<80;i++);      
 104   1      }
 105          
 106          void main()
 107          {
 108   1      
 109   1      
 110   1      
 111   1          //================NRF905³õÊ¼»¯
 112   1              CSN=1;                                          // Spi  disable                                         
 113   1              SCK=0;                                          // Spi clock line init high
 114   1              DR=1;                                           // Init DR for input
 115   1              AM=1;                                           // Init AM for input
 116   1              PWR_UP=1;                                       // nRF905 power on
 117   1              TRX_CE=0;                                       // Set nRF905 in standby mode
C51 COMPILER V7.00  Ê_¶________Äµ¥_¬»____ò                                                 06/25/2010 16:03:10 PAGE 3   

 118   1              TX_EN=0;                                        // set radio in Rx mode 
 119   1      
 120   1              //================
 121   1              Config905();                            // Config nRF905 module
 122   1      
 123   1      allowmotorchack_flag=1;
 124   1      
 125   1      while(1)
 126   1      { 
 127   2      /***********************************************************/
 128   2                        Delay(1);
 129   2                      SetRxMode();
 130   2                 if (DR){                     // If recive data ready... 
 131   3                 RxPacket();                  // ... recive data
 132   3                              }
 133   2      
 134   2      /*****************************************************/
 135   2                      /*##################¼ÓÈëµÄ¶æ»ú³ÌÐò²¿·ÖÈý################################*/
 136   2                      if(RxBuf[0]==1){
 137   3                  duoji_1_up=0;
 138   3                              allowmotorchack_flag=0;
 139   3                                      }
 140   2                 else {
 141   3                              duoji_1_up=1;
 142   3                              allowmotorchack_flag=1;
 143   3                                } 
 144   2               
 145   2      
 146   2           if(RxBuf[1]==1){
 147   3                allowmotorchack_flag=0;
 148   3                duoji_1_down=0;
 149   3                                }
 150   2                 else {
 151   3                              duoji_1_down=1;
 152   3                              allowmotorchack_flag=1;
 153   3                                } 
 154   2                
 155   2      
 156   2                      if(RxBuf[2]==1){
 157   3                      allowmotorchack_flag=0;
 158   3                duoji_2_up=0;
 159   3                                }
 160   2                 else {
 161   3                                      duoji_2_up=1;
 162   3                                      allowmotorchack_flag=1;
 163   3                                } 
 164   2                
 165   2      
 166   2                       if(RxBuf[3]==1){
 167   3                       allowmotorchack_flag=0;
 168   3                 duoji_2_down=0;
 169   3      
 170   3                                }
 171   2                 else {
 172   3                              duoji_2_down=1;
 173   3                              allowmotorchack_flag=1;
 174   3                                } 
 175   2                
 176   2      delayms(2);
 177   2      /*################¶æ»ú²¿·Ö³ÌÐòÈý¼ÓÈëÍê±Ï################################*/
 178   2      /*******************************Ö±Á÷µç»ú¼ÓÈëµÄµÚ¶þ²¿·Ö*************************/
 179   2                              if(RxBuf[4]==1){
C51 COMPILER V7.00  Ê_¶________Äµ¥_¬»____ò                                                 06/25/2010 16:03:10 PAGE 4   

 180   3                                      allowmotorchack_flag=0;
 181   3                                      motor_1_1=1;
 182   3                                      motor_1_2=0;
 183   3                                      motor_2_1=1;
 184   3                                      motor_2_2=0;
 185   3                              }
 186   2                              
 187   2                      else if(RxBuf[5]==1){
 188   3                                      allowmotorchack_flag=0;
 189   3                              motor_1_1=0;
 190   3                                      motor_1_2=1;
 191   3                                      motor_2_1=0;
 192   3                                      motor_2_2=1;
 193   3                              }
 194   2      
 195   2                              else if(RxBuf[6]==1){
 196   3                                      allowmotorchack_flag=0;
 197   3                                     motor_1_1=0;
 198   3                                               motor_1_2=1;
 199   3                                          motor_2_1=1;
 200   3                                          motor_2_2=0;
 201   3                              }
 202   2      
 203   2                              else if(RxBuf[7]==1){
 204   3                                      allowmotorchack_flag=0;
 205   3                              motor_1_1=1;
 206   3                                      motor_1_2=0;
 207   3                                      motor_2_1=0;
 208   3                                      motor_2_2=1;
 209   3                              }
 210   2      
 211   2                      else    if(RxBuf[8]==1){
 212   3                                      allowmotorchack_flag=0;
 213   3                              motor_1_1=0;
 214   3                                      motor_1_2=0;
 215   3                                      motor_2_1=1;
 216   3                                      motor_2_2=0;
 217   3                              }
 218   2      
 219   2                      else    if(RxBuf[9]==1){
 220   3                                      allowmotorchack_flag=0;
 221   3                              motor_1_1=1;
 222   3                                      motor_1_2=0;
 223   3                                      motor_2_1=0;
 224   3                                      motor_2_2=0;
 225   3                              }
 226   2                      else {
 227   3                      refree_allpins();
 228   3                      allowmotorchack_flag=1;
 229   3                      }
 230   2      
 231   2              
 232   2              delayms(20);
 233   2      /*******************************Ö±Á÷µç»ú¼ÓÈëµÄµÚ¶þ²¿·ÖÍê±Ï********************/
 234   2                      
 235   2      }
 236   1      
 237   1      }
 238          /*******************************************************************************************/
 239          /*******************************************************************************************/
 240          //function Config905();
 241          /*******************************************************************************************/
C51 COMPILER V7.00  Ê_¶________Äµ¥_¬»____ò                                                 06/25/2010 16:03:10 PAGE 5   

 242          void Config905(void)
 243          {
 244   1              uchar i;                                        
 245   1              CSN=0;                                          // Spi enable for write a spi command
 246   1              SpiWrite(WC);                           // Write config commandÐ´·ÅÅäÖÃÃüÁî
 247   1              for (i=0;i<RxTxConf.n;i++)      // Write configration words  Ð´·ÅÅäÖÃ×Ö
 248   1              {
 249   2                      SpiWrite(RxTxConf.buf[i]);
 250   2              }
 251   1              CSN=1;                                          // Disable Spi
 252   1      }
 253          /*******************************************************************************************/
 254          //function SpiWrite();
 255          /*******************************************************************************************/
 256          void SpiWrite(uchar  byte)
 257          {
 258   1              uchar i;        
 259   1              DATA_BUF=byte;                          // Put function's parameter into a bdata variable               
 260   1              for (i=0;i<8;i++)                       // Setup byte circulation bits
 261   1              {       
 262   2                      
 263   2                      if (flag)                               // Put DATA_BUF.7 on data line
 264   2                              MOSI=1;
 265   2                      else
 266   2                              MOSI=0;
 267   2                      SCK=1;                                  // Set clock line high
 268   2                      DATA_BUF=DATA_BUF<<1;   // Shift DATA_BUF
 269   2                      SCK=0;                                  // Set clock line low 
 270   2              }       
 271   1      }
 272          /*******************************************************************************************/
 273          //function SpiRead();
 274          /*******************************************************************************************/
 275          uchar SpiRead(void)
 276          {
 277   1              uchar i;        
 278   1              for (i=0;i<8;i++)                       // Setup byte circulation bits
 279   1              {       
 280   2                      DATA_BUF=DATA_BUF<<1;   // Right shift DATA_BUF
 281   2                      SCK=1;                                  // Set clock line high
 282   2                      if (MISO)
 283   2                              flag1=1;                        // Read data
 284   2                      else
 285   2                              flag1=0;
 286   2                                                              
 287   2                      
 288   2                      SCK=0;                                  // Set clock line low
 289   2              }
 290   1              return DATA_BUF;                        // Return function parameter
 291   1      }
 292          /*******************************************************************************************/
 293          //function TxPacket();
 294          /*******************************************************************************************
 295          void TxPacket(void)
 296          {
 297                  uchar i;
 298                  //Config905();                          
 299                  CSN=0;                                          // Spi enable for write a spi command   
 300                  SpiWrite(WTP);                          // Write payload command
 301                  for (i=0;i<32;i++)
 302                  {
 303                          SpiWrite(TxBuf[i]);             // Write 32 bytes Tx data
C51 COMPILER V7.00  Ê_¶________Äµ¥_¬»____ò                                                 06/25/2010 16:03:10 PAGE 6   

 304                  }
 305                  CSN=1;                                          // Spi disable                                          
 306                  Delay(1);
 307                  CSN=0;                                          // Spi enable for write a spi command   
 308                  SpiWrite(WTA);                          // Write address command
 309                  for (i=0;i<4;i++)                       // Write 4 bytes address
 310                  {
 311                          SpiWrite(RxTxConf.buf[i+5]);
 312                  }       
 313                  CSN=1;                                          // Spi disable
 314                  TRX_CE=1;                                       // Set TRX_CE high,start Tx data transmission
 315                  Delay(1);                                       // while (DR!=1);
 316                  TRX_CE=0;                                       // Set TRX_CE low
 317          }
 318          /*******************************************************************************************/
 319          //function RxPacket();
 320          /*******************************************************************************************/
 321          void RxPacket(void)
 322          {
 323   1              uchar i;        
 324   1              TRX_CE=0;                                       // Set nRF905 in standby mode   
 325   1              CSN=0;                                          // Spi enable for write a spi command
 326   1              SpiWrite(RRP);                          // Read payload command 
 327   1              for (i=0;i<32;i++)
 328   1              {
 329   2                      RxBuf[i]=SpiRead();             // Read data and save to buffer         
 330   2              }
 331   1              CSN=1;                                          // Disable spi
 332   1              while(DR||AM);  
 333   1              TRX_CE=1;
 334   1               //=====================
 335   1                if(RxBuf[0]==1){ 
 336   2                                              
 337   2      
 338   2                                                              }
 339   1                      else {
 340   2                                              
 341   2      
 342   2                      }
 343   1      
 344   1                 if(RxBuf[1] == 1) {
 345   2                                      
 346   2      
 347   2                      }
 348   1                      else{ 
 349   2                                                      
 350   2                              
 351   2                      }                                                       
 352   1                                                              
 353   1      }
 354          
 355          /*******************************************************************************************/
 356          //function SetTxMode();
 357          /*******************************************************************************************
 358          void SetTxMode(void)                            
 359          {       
 360                  TX_EN=1;
 361                  TRX_CE=0;
 362                  Delay(1);                                       // delay for mode change(>=650us)
 363          }                               
 364          /*******************************************************************************************/
 365          //function SetRxMode();
C51 COMPILER V7.00  Ê_¶________Äµ¥_¬»____ò                                                 06/25/2010 16:03:10 PAGE 7   

 366          /*******************************************************************************************/
 367          void SetRxMode(void)
 368          {
 369   1              TX_EN=0;
 370   1              TRX_CE=1;
 371   1              Delay(1);                                       // delay for mode change(>=650us)                               
 372   1      }
 373          
 374          
 375          
 376          /***************************************
 377          void send(unsigned char str[])
 378          {
 379                  unsigned int i=0;
 380                  while(str[i]!='\0')
 381                  {
 382                          SBUF=str[i];
 383                          while(!TI);
 384                          TI=0;
 385                          i++;
 386                          }
 387          }
 388          ***************************************/
 389          void delayms(unsigned char ms) 
 390          
 391          {
 392   1          unsigned char i;
 393   1          while(ms--)
 394   1           {
 395   2              for(i=0;i<120;i++);
 396   2           }
 397   1      }
 398          
 399          void refree_allpins(){
 400   1                      motor_1_1=1;
 401   1                                      motor_1_2=1;
 402   1                                      motor_2_1=1;
 403   1                                      motor_2_2=1;
 404   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    389    ----
   CONSTANT SIZE    =     11    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     70       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
